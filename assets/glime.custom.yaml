patch:
  ## 方案设定

  ### 取消预览全拼
  # translator/preedit_format: {}

  ### 选择双拼方案或全拼 (单选)
  __include: glime.layout:/flypy   # 小鹤
  # __include: glime.layout:/natural # 自然码
  # __include: glime.layout:/ms      # 微软
  # __include: glime.layout:/full    # 全拼
  # __include: glime.layout:/chole   # chole (Colemak 首推)

  ### 注意: 以下说明所使用的双拼方案为小鹤，其余方案原理相同。

  ## 音码
  ### 简拼
  ### 贴士:
  ### 开启全局简拼的副作用较大，也与此方案的形码机制不太兼容。
  ### 所以双拼方案下仅开启了带分隔符的简拼。
  ### 故 (双拼方案下): qqww -->「秋闱」 q'q'w'w -->「千千万万」
  ### 为了免除人工给每个字母加单引号的麻烦，该方案引入了 ;; 后缀以强制分词。
  ### 输入 qqww + ;; (或于下方设置「强制分词」快捷键) 将直接得到 q'q'w'w

  ### 开启一简码 (单字母候选前三位固定)
  translator/onechar: true

  ### 常用字固定顺序
  #### 该选项的值将决定单字候选是否固定顺序。
  #### 注意:
  #### - 仅当候选全为单字时生效
  #### - 此选项并不干涉 rime 自身的调频策略，只是改变单字候选展示顺序。
  translator/fixed_single_ch: true

  ## 形码
  ### 输入「:」(或于下方设置「形码引导」快捷键) 开始筛选当前候选项。
  ### 单字直接匹配
  ### 例A1:
  ### ui:a  --> 1.事 :al 2.石 :ak 3. ...
  ### ui:oc --> 1.时 :oc
  ### 二字词语按 首字首码 + 末字首码 + 末字末码 + 首字末码 匹配
  ### 例A2:
  ###   uiui    --> 1.事实 2.实施 ... (页a) X.史诗 ... (页b) Y.时势
  ###   uiui:l  --> 1.史诗 :lycn 2.史实 :lbdn 3. ...
  ###   uiui:of --> 1.时势 :oflc
  ### 三字词取末二字，规则与二字词相同。

  ### 形码提示等级
  #### 0: 不提示      | 它
  #### 1: 仅编码      | 它 :bb
  #### 2: 编码 + 部件 | 它 :bb 宀匕
  translator/glyph_hint_level: 2

  ### 自动形码
  #### 0: 关闭自动形码
  #### 1: 当前候选为 [单字1,   单字2,    ...] 时
  #### 紧随其后的两码将按 首字首码 + *首字末码* 匹配形码 (无需「:」)，
  #### 码长为 3 时匹配结果插入首选
  #### 码长为 4 时匹配结果插入首选或次选 (见下方形码匹配优先级)。
  #### 例B1:
  ####   wf   --> 1.问      2.文      3. ...
  ####   wfh  --> 1.稳 :hx  2.文化    3. ...
  ####   wfhx --> 1.文化    2.稳 :hx  3. ... 或 1.文化 2.稳 :hx 3. ... (见例C1)
  #### 2: 当前候选为 [二字词1, 二字词2, ...] 时
  #### 紧随其后的两码将按 首字首码 + *末字首码* 匹配形码 (无需「:」)，
  #### 匹配结果插入首选或次选 (见下方形码匹配优先级)。
  #### 候选为 [单字1, 单字2, ...] 时与1相同。
  #### 例B2:
  ####   key  --> 1.可以 2.课 :yg 3. ...
  ####   wfhx --> 1.文化 2.稳 :hx 3. ...
  #### 注意:
  #### - 该功能 *不支持* 全拼方案。
  #### - 该功能在造词过程中依旧有效。
  #### - 该功能仅匹配 I 级及 II 级字 (减少无谓干扰)，III 级字请用「:」引导筛选。
  translator/glyph_auto_level: 2

  ### 形码匹配优先级
  #### 该选项的值将决定 *四码时* 形码匹配结果位于首选还是次选。取值范围为 0 - 10
  #### 当首选词的词频低于此值且存在形码匹配结果时，形码匹配结果将被置顶。
  #### 例C1:
  ####   假设「文化」的词频为 9.5,
  ####   输入 wfhx, 将匹配词语「文化」及单字「稳」(音码 ws, 形码 hx)
  ####   若设置 glyph_min_freq 为 0，
  ####     9.5 > 0， 故排序情况为 --> 1.文化   2.稳 :hx 3. ...
  ####   若设置 glyph_min_freq 为 10，
  ####     9.5 < 10，故排序情况为 --> 1.稳 :yg 2.文化   3. ...
  #### 简言之该值越大，形码匹配结果越容易置顶，设为 10 时可确保置顶。
  #### 注意:
  #### 1. 若当前输入无法成词 (包含无效双拼组合) 且存在形码匹配结果时
  ####    形码匹配结果将自动置顶。如: uioc -> 1. 时
  ####    故即使该项设为 0 也不能确保次选。
  #### 2. 示例中所使用的词频格式仅为说明之便，与内部词频数值格式无关。
  translator/glyph_min_freq: 1


  ## 快捷键
  ### toggle: zh_simp_s2t  切换 [简繁]
  ### toggle: full_shape   切换 [全半]
  ### toggle: full_charset 切换 [一𰻝] (8105字符集/超大字符集)
  ### comma     = , (逗号)  |  apostrophe  = ' (单引号)
  ### period    = . (句号)  |  bracketleft = [ (左方括号，右方括号为 bracketright)
  ### slash     = / (斜杠)  |  plus        = + (加号，减号为 minus)
  ### semicolon = ; (分号)  |  backslash   = \ (反斜杠)
  ### 更多参见: https://github.com/LEOYoon-Tsaw/Rime_collections/blob/master/Rime_description.md
  key_binder/bindings/+:
    ### emacs 风格文本编辑
    - { when: composing, accept: Control+p, send: Up }
    - { when: composing, accept: Control+n, send: Down }
    - { when: composing, accept: Control+b, send: Left }
    - { when: composing, accept: Control+f, send: Right }
    - { when: composing, accept: Control+a, send: Home }
    - { when: composing, accept: Control+e, send: End }
    - { when: composing, accept: Control+d, send: Delete }
    - { when: composing, accept: Control+k, send: Shift+Delete }
    - { when: composing, accept: Control+h, send: BackSpace }
    - { when: composing, accept: Control+g, send: Escape }
    - { when: composing, accept: Control+bracketleft, send: Escape }
    - { when: composing, accept: Control+y, send: Page_Up }
    - { when: composing, accept: Alt+v, send: Page_Up }
    - { when: composing, accept: Control+v, send: Page_Down }
    ### Tab 在词间切换
    - { when: composing, accept: ISO_Left_Tab, send: Shift+Left }
    - { when: composing, accept: Shift+Tab, send: Shift+Left }
    - { when: composing, accept: Tab, send: Shift+Right }
    ### 减号等号翻页
    - { when: has_menu, accept: minus, send: Page_Up }
    - { when: has_menu, accept: equal, send: Page_Down }
    ### 选项开关
    - { when: always, accept: Control+Shift+1, toggle: zh_simp_s2t }
    - { when: always, accept: Control+Shift+2, toggle: full_shape }
    - { when: always, accept: Control+Shift+3, toggle: full_charset }
    - { when: composing, accept: Control+t, toggle: zh_simp_s2t }
    #### 二三选上屏
    - { when: has_menu, accept: semicolon, send: 2 }
    - { when: has_menu, accept: apostrophe, send: 3 }
    #### 强制分词
    - { when: composing, accept: slash, send_sequence: ';;{BackSpace}' }
    #### 形码引导
    - { when: composing, accept: bracketleft, send: ':' }
