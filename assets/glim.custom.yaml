patch:
  ## == 方案设定 ==

  ### 取消预览全拼
  # translator/preedit_format: {}

  ### 选择双拼方案或全拼 (单选)
  __include: glim.layout:/flypy   # 小鹤
  # __include: glim.layout:/natural # 自然码
  # __include: glim.layout:/ms      # 微软
  # __include: glim.layout:/pyjj    # 拼音加加
  # __include: glim.layout:/full    # 全拼
  # __include: glim.layout:/chole   # chole (Colemak 首推)

  ### 注意: 以下说明所使用的双拼方案为小鹤，其余方案原理相同。

  ## == 音码 ==

  ### 简拼
  ### 贴士:
  ### 开启全局简拼的副作用较大，也与此方案的形码机制不太兼容。
  ### 所以双拼方案下仅开启了带分隔符的简拼。
  ### 故 (双拼方案下): qqww -->「秋闱」 q'q'w'w -->「千千万万」
  ### 为了免除人工给每个字母加单引号的麻烦，该方案引入了 ;; 后缀以强制分词。
  ### 输入 qqww + ;; (或于下方设置「强制分词」快捷键) 将直接得到 q'q'w'w

  ### 单字固序 (fixed_single_ch)
  #### 该选项的值将单字候选是否固定顺序。(默认固定)
  #### 二字及以上词语是否调频由 translator/enable_user_dict 选项决定。
  #### 形码候选单字排序也由此项决定 (见「关于重码」)。
  translator/fixed_single_ch: true

  ## == 形码 ==

  ### 形码反查
  ### 输入「:」(或于下方设置「形码引导」快捷键) 开始筛选当前候选项。
  ### 单字直接匹配
  ### 例1:
  ### ui:a  --> 1.事 :al 2.石 :ak 3. ...
  ### ui:oc --> 1.时 :oc
  ### 二字词语按 首字首码 + 末字首码 匹配
  ### 例2:
  ###   uiui    --> 1.事实 2.实施 ... (页a) X.史诗 ... (页b) Y.时势
  ###   uiui:l  --> 1.史诗 :lycn 2.史实 :lbdn 3. ...
  ###   uiui:of --> 1.时势 :oflc
  ### 三字词取末二字，规则与二字词相同。

  ### 形码提示等级
  #### 0: 不提示      | 它
  #### 1: 仅编码      | 它 :bb
  #### 2: 编码 + 部件 | 它 :bb 宀匕 (默认值)
  translator/glyph_hint_level: 2

  ### 自动形码 (glyph_auto_level)
  #### 0: 关闭自动形码
  #### 1: 当前候选为 [单字1,   单字2,    ...] 时
  #### 紧随其后的两码将按 首字首码 + 末字首码 匹配形码 (无需「:」)，
  #### 形码码长为 1 时匹配结果插入首选
  #### 形码码长为 2 时匹配结果插入首选或次选 (见下方「关于重码」)。
  #### 例1:
  ####   wf   --> 1.问      2.文      3. ...
  ####   wfh  --> 1.稳 :hx  2.文化    3. ...
  ####   yiru --> 1.一如    2.佚 :ru  3. ...
  ####         或 1.佚 :ru 2.一如 3. ... (见「关于重码」)
  #### 2: 当前候选为 [二字词1, 二字词2, ...] 时 (默认值)
  #### 紧随其后的两码将按 首字首码 + *末字首码* 匹配形码 (无需「:」)，
  #### 匹配结果插入首选或次选 (见下方「关于重码」)。
  #### 候选为 [单字1, 单字2, ...] 时与1相同。
  #### 例2:
  ####   uiyj  --> 1.实验 2.试验 3. ... n.食盐
  ####   uiyjr --> 1.食盐 2. ...
  #### 注意:
  #### - 该功能 *不支持* 全拼方案。
  #### - 该功能在造词过程中依旧有效。
  #### - 该功能仅匹配 I 级及 II 级字 (减少无谓干扰)，III 级字请用「:」引导筛选。
  translator/glyph_auto_level: 2

  ### 关于重码
  ####  当二字词与单字全码重码时，其排序由 translator/fixed_single_ch 决定。
  ####  例:
  ####    fixed_single_ch: false
  ####    didm -> 1.地点 2.涤 dm 3. ...
  ####    输入一次 (或多次) 「涤」 后, 排序可能变为:
  ####    didm -> 1.涤 dm 2.地点  dm 3. ...
  ####
  ####    fixed_single_ch: true
  ####    didm -> 1.地点 2.涤 dm 3. ...
  ####    「涤」 字将始终排在第二，不会受到其他词词频影响。
  ####  当开启此选项时, 如果你对某些全码的排序不满意
  ####  可自行修改 lua/tables/duplicate/[Your_schema].lua,
  ####  注释掉你不想要的词即可。
  ####  例:
  ####    ["didm"] = {["phrase"] = "地点", ["word"] = {"涤"}},
  ####    didm -> 1.地点 2.涤 dm 3. ...
  ####    -- ["didm"] = {["phrase"] = "地点", ["word"] = {"涤"}},
  ####    didm -> 1.涤 dm 2.地点  dm 3. ...


  ## == 快捷键 ==

  ### 标点
  ### 写法:
  ### "'" : { pair: ["「", "」" ] }  第一次按是「，第二次是」
  ### '/' : [ '/', ; ]                弹出菜单
  ### '.' : { commit: 。}            无菜单直接上屏，优先级最高
  punctuator/half_shape/=:
    ',' : { commit: ，}
    '.' : { commit: 。}
    '/' : [ '/', ; ]
    '?' : { commit: ？}
    ':' : { commit: ：}
    '''': { pair: [ 「, 」 ] }
    '"' : { pair: [ 「, 」 ] }
    '\' : [ 、, '\' ]
    '|' : [ ·, ・, '|', ｜, '§', '¦', '‖', ︴]
    '!' : { commit: ！}

  ### 按键
  ### 说明:
  ### toggle: zh_simp_s2t  切换 [简繁]
  ### toggle: full_shape   切换 [全半]
  ### toggle: full_charset 切换 [一𰻝] (8105字符集/超大字符集)
  ### comma     = , (逗号)  |  apostrophe  = ' (单引号)
  ### period    = . (句号)  |  bracketleft = [ (左方括号，右方括号为 bracketright)
  ### slash     = / (斜杠)  |  plus        = + (加号，减号为 minus)
  ### semicolon = ; (分号)  |  backslash   = \ (反斜杠)
  ### 更多参见:
  ### https://github.com/LEOYoon-Tsaw/Rime_collections/blob/master/Rime_description.md
  key_binder/bindings/+:
    ### emacs 风格文本编辑
    - { when: composing, accept: Control+p, send: Up }
    - { when: composing, accept: Control+n, send: Down }
    - { when: composing, accept: Control+b, send: Left }
    - { when: composing, accept: Control+f, send: Right }
    - { when: composing, accept: Control+a, send: Home }
    - { when: composing, accept: Control+e, send: End }
    - { when: composing, accept: Control+d, send: Delete }
    - { when: composing, accept: Control+k, send: Shift+Delete }
    - { when: composing, accept: Control+h, send: BackSpace }
    - { when: composing, accept: Control+g, send: Escape }
    - { when: composing, accept: Control+bracketleft, send: Escape }
    ### Tab, Control+i/o 字间移动光标
    - { when: composing, accept: ISO_Left_Tab, send: Shift+Left }
    - { when: composing, accept: Shift+Tab, send: Shift+Left }
    - { when: composing, accept: Tab, send: Shift+Right }
    - { when: composing, accept: Control+i, send: Shift+Right }
    - { when: composing, accept: Control+o, send: Shift+Left }
    ### 减号等号翻页
    - { when: has_menu, accept: minus, send: Page_Up }
    - { when: has_menu, accept: equal, send: Page_Down }
    ### 选项开关
    - { when: always, accept: Control+Shift+1, toggle: zh_simp_s2t }
    - { when: always, accept: Control+Shift+2, toggle: full_shape }
    - { when: always, accept: Control+Shift+3, toggle: full_charset }
    - { when: composing, accept: Control+t, toggle: zh_simp_s2t }
    #### 二三选上屏
    - { when: has_menu, accept: semicolon, send: 2 }
    - { when: has_menu, accept: apostrophe, send: 3 }
    #### 强制分词
    - { when: composing, accept: slash, send_sequence: ';;{BackSpace}' }
    #### 形码引导
    - { when: composing, accept: bracketleft, send: ':' }
